// 1. Write the C# code to display “<n> minute(s) ago" if difference between both dates is less than an hour and “<n> hour(s) ago" 
if the difference is less than a day and “<n> day(s) ago" if the difference is less than a month and the date if the difference is more than a month.

using System;

namespace DatesDifferences
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime currentDate = DateTime.Now;

            Console.Write("Enter Date (dd-mm-yyyy hh:mm:ss) : ");
            DateTime oldDate = DateTime.Parse(Console.ReadLine());

            Console.WriteLine("\n\n" + getTimeStamp(currentDate, oldDate));

            Console.ReadKey();
        }

        public static string getTimeStamp(DateTime currentDate, DateTime updateDate)
        {
            int YearDiff = currentDate.Year - updateDate.Year;
            int MonthDiff = currentDate.Month - updateDate.Month;
            int DayDiff = currentDate.Day - updateDate.Day;
            int HourDiff = currentDate.Hour - updateDate.Hour;
            int MinuteDiff = currentDate.Minute - updateDate.Minute;
            int SecondDiff = currentDate.Second - updateDate.Second;

            if (YearDiff > 1)
                return $"File was updated {YearDiff} years ago";
            else if (MonthDiff > 1)
                return $"File was updated {MonthDiff} Months ago";
            else if (DayDiff > 1)
                return $"File was updated {DayDiff} Days ago";
            else if (HourDiff > 1)
                return $"File was updated {HourDiff} Hours ago";
            else if (MinuteDiff > 1)
                return $"File was updated {MinuteDiff} Minutes ago";
            else
                return $"File was updated {SecondDiff} Seconds ago";
        }
    }
}

// 2. Write a program in C# Sharp to create and read last n number of lines of a file. Go to the editor.

using System;
using System.IO;
using System.Linq;

namespace WritingText
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("How many lines you want to enter");
            int TotLines = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine("Enter some text lines to enter in text file: \n");
            string[] writeText = new string[TotLines];

            for (int i = 0; i < writeText.Length; i++)
            {
                Console.Write($"Line {i + 1} : ");
                writeText[i] = Console.ReadLine();
            }

            File.WriteAllLines(@"\\tsclient\C\Testing\practice.txt", writeText);
            Console.WriteLine("Text written in the file successfully...\n\n");

            Console.WriteLine("How many files you want to disply: ");
            int getLines = Convert.ToInt32(Console.ReadLine());

            string[] GetText = File.ReadAllLines(@"\\tsclient\C\Testing\practice.txt");

            Console.WriteLine("Here are the selected lines : \n");
            foreach (string text in GetText.TakeLast(getLines))
                Console.WriteLine(text);

            Console.ReadKey();
        }
    }
}

// 3. Write a function that, given an array A of N integers, returns the smallest positive integer (greater than 0) that does not occur in A.
For example, given A = [1, 3, 6, 4, 1, 2], the function should return 5

using System;

namespace SmallestPositive
{
    class Program
    {
        public static int solution(int[] A)
        {
            int n = 1;
            Array.Sort(A);
            for (int i = 1; i <= 100000; i++)
            {
                for (int i2 = 0; i2 <= A.Length - 1; i2++)
                {
                    if (A[i2] == i)

                    {
                        n = A[i2] + 1;
                        break;
                    }
                }
            }
            return n;
        }
        static void Main(string[] args)
        {
            int[] IntArr1 = { 1, 2, 3};
            foreach (int i in IntArr1)
                Console.Write(i + ", ");

            Console.WriteLine("\n\nSmallest positive integer : " + solution(IntArr1));
            Console.WriteLine("\n========================\n");

            int[] IntArr2 = { -1, -3 };
            foreach (int j in IntArr2)
                Console.Write(j + ", ");

            Console.WriteLine("\n\nSmallest positive integer : " + solution(IntArr2));

            Console.ReadKey();
        }
    }
}

// 4. Given six digits, find the earliest valid time that can be displayed on a digital clock (in 24-hour format) using those digits.
For example, given digits 1, 8, 3, 2, 6, 4 the earliest valid time is "12:36:48". Note that "12 : 34 : 68" is not a valid time.

using System;

namespace DigitalClock
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Enter 6 single digits for digital clock: ");
            Console.Write("Digit 1 : ");
            int a = Convert.ToInt32(Console.ReadLine());
            Console.Write("Digit 2 : ");
            int b = Convert.ToInt32(Console.ReadLine());
            Console.Write("Digit 3 : ");
            int c = Convert.ToInt32(Console.ReadLine());
            Console.Write("Digit 4 : ");
            int d = Convert.ToInt32(Console.ReadLine());
            Console.Write("Digit 5 : ");
            int e = Convert.ToInt32(Console.ReadLine());
            Console.Write("Digit 6 : ");
            int f = Convert.ToInt32(Console.ReadLine());

            Console.WriteLine(Solution(a, b, c, d, e, f));
            Console.ReadKey();
        }

        public static string Solution(int A, int B, int C, int D, int E, int F)
        {
            int[] ClockDigits = { A, B, C, D, E, F };
            Array.Sort(ClockDigits);
            string ClockTime = "";
            if (ClockDigits[0] > 2 && ClockDigits[1] > 4)
                return "Not Possible";
            if (ClockDigits[2] > 5 && ClockDigits[3] > 9)
                return "Not Possible";
            if (ClockDigits[4] > 5 && ClockDigits[5] > 9)
                return "Not Possible";
            else
            {
                for (int i = 0; i < 6; i++)
                {
                    ClockTime += ClockDigits[i].ToString();
                    if (i == 1 || i == 3)
                        ClockTime += ":";
                }
                return $"Minimum time for the clock is : {ClockTime}";
            }
        }
    }
}

// 5. Reverse the ordering of words in a String
I have this string s1 = "My name is X Y Z"
and I want to reverse the s1 = "Z Y X is name My" 

using System;
class myProgram
{
    static void Main()
    {
        Console.WriteLine(StringReversing.ReverseString("ym eman si X Y Z"));
        Console.ReadKey();
    }
}

static class StringReversing
{
    public static string ReverseString(string myStr)
    {
        char[] myArr = myStr.ToCharArray();
        Array.Reverse(myArr);
        return new string(myArr);
    }
}
